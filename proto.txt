//	c_files/pipe_parse/pipe.c
int    ft_pipe(void);

//	c_files/pipe_parse/redir.c
void     create_file(t_data *d, char *file_name, t_toktype r_type);
t_token        *handle_redir(t_data *d, t_token *redir_node, t_toktype type);

//	c_files/pipe_parse/heredoc.c
char     *heredoc(char *end, t_data *d, char *print, int is_quote);

//	c_files/init.c
char     *custom_get_cwd(t_data *d);
int    update_cwd(t_data *data);
void     init_data(t_data *data, char **env);

//	c_files/utils/string_tools3.c
char     *ms_strjoin(t_data *d, char const *s1, char const *s2);
char     *ms_strdup(t_data *d, const char *s1);

//	c_files/utils/string_tools.c
char     *ft_remove_prefix(t_data *d, const char *str, char *prefix);
char     *truncate_at_end(const char *str, char cut_letter);
char     *ft_str_mega_join(const char *a, const char *b, \;
int    chr_amnt(const char *str, char c);
int    get_arr_len(void **arr);

//	c_files/utils/strstr.c
char     *ft_strstr(char *str, char *to_find);
char     **ft_split_str(t_data *d, char *str, char *sep);
int    ft_char_in_str(char c, const char *txt);

//	c_files/utils/env_tools.c
void     update_environ(t_data *d);
char     *get_env_value(t_data *d, t_dblist *list, char *key);
int    update_env_variables(t_data *d);
int    set_key_value(t_data *d, t_dblist *list, char *key, char *value);

//	c_files/utils/prompt_checker.c
char     *get_quote_end(t_data *d, char *end, char *msg);
int    set_quotes(t_data *d, char **prompt);
int    set_pipe(t_data *d, char **prmpt);
int    set_par(t_data *d, char **prmpt, int i);
int    validate_prmpt(t_data *d, char **prmpt);

//	c_files/utils/design_tools.c
int    write_anim_txt(t_data *d, const char *txt);
void     set_string_color(char **str, char *color);

//	c_files/utils/list_tools.c
t_dblist         *get_dblst_node(t_dblist *lst, const char *content);
void     add_to_list(t_data *d, t_dblist *lst, char *content);
void     init_env_list(t_data *d, char **env);
void     reorder_dblst(t_dblist *list);

//	c_files/utils/debug.c
char     *get_dir_in_path(t_data *d, char *cmd_name);
int    search_true_cmd(t_data *d, char *cmd_name, char *arg, char **flags);
int    get_char_index(char *str, char c);
int    show_execion_info();

//	c_files/utils/prompt_checker2.c
int    is_valid_redir(char *p, int i, int j, char c);
int    check_redir_validity(char *prompt);
int    check_pipe_validity(t_data *d, char **prmpt, int last_pipe_index);
int    validate_prmpt_b(char **prmpt, int has_redir, int is_only_spc);

//	c_files/utils/string_tools2.c
int    is_in_quote(char *str, int index);
char     *copy_until_char(t_data *d, char *str, int *start, const char *set);
void     remove_chars(t_data *d, char **txt, const char *to_remove);
char     *contract_str(t_data *d, char **strs);
int    cmp_str(const char *a, const char *b);

//	c_files/prompt.c
int    get_terminal_prompt(t_data *d);

//	c_files/builtins/man.c
int    man(t_data *d, char *arg, char **flags, int status);

//	c_files/builtins/ls.c
void     display_entry(struct dirent *entry, int *len);
int    execute_ls(t_data *d, char *arg, int print_arg);
int    ls(t_data *d, char *arg, char **flags, int status);

//	c_files/builtins/exec.c
int    exec(t_data *d, char *program, char **argv, int u __attribute__((unused)));

//	c_files/builtins/exit.c
int    is_all_digit(char *str);
int    custom_exit(t_data *data, char *error_msg, char **flags, int status);

//	c_files/builtins/unset.c
int    unset(t_data *d, char *arg, char **flags, int status);

//	c_files/builtins/env.c
int    env(t_data *d, char *arg, char **flags, int has_prefix);

//	c_files/builtins/pwd.c
int    pwd(t_data *d, char *arg, char **flags, int status);

//	c_files/builtins/clear.c
int    clear(t_data *d, char *a, char **f, int st);

//	c_files/builtins/export.c
int    export(t_data *d, char *arg, char **flags, int tmp_mem);

//	c_files/builtins/cd.c
int    cd(t_data *d, char *arg, char **flags, int status);

//	c_files/builtins/echo.c
int    echo(t_data *d, char *arg, char **flags, int status __attribute__((unused)));

//	c_files/free.c
int    safe_free(void *item);
int    free_void_array(void ***item);
int    free_data(t_data *data);

//	c_files/parse_prompt.c
int    execute_command(t_data *d, char *cmd_name, char *arg, char **flags);

//	c_files/init_bltn.c
void     init_builtins_data(t_data *d);

//	c_files/signal.c
void     setup_signal(int is_waiting, int is_heredoc);

//	c_files/tokens/token_execute.c
t_token        *set_args(t_data *d, t_token *strt, t_toktype k_typ, char ***args);
void     close_redir_stream(t_data *d);
t_token        *execute_cmd_token(t_data *d, t_token *node, int *fct_ret);
t_token        *execute_token(t_data *d, t_token *node, int *fct_return);
int    exec_prompt(t_data *d, char *terminal_line);

//	c_files/tokens/utils_tokens.c
char     **init_flags(t_data *d, int splits_amount, char **splits);
char     **split_prompt(char *str, int str_len);
void     unquote_splits(t_data *d, char **splits);
char     **get_splits(t_data *d, char *prmpt, char **cmd_name, char **arg);
char     **get_flags(t_data *d, char *prmpt, char **cmd_name, char **arg);

//	c_files/tokens/token_expand_tools.c
char     *expand_special_segment(t_data *d, char *split, int *i);
char     *expand_segment(t_data *d, char *split, int *i);
char     *expand_split(t_data *d, char *split, int len, int i);
void     expand_splits(t_data *d, char **splits);
void     update_node_expansion(t_data *d, t_token *node, int set_new_type);

//	c_files/tokens/token_parser.c
t_toktype          get_token_type_2(t_data *d, char *str, t_token *prev);
t_toktype          get_token_type(t_data *d, char *str, t_token *prev);
int    requires_arg(t_token *node);
const      char *types_names[] = {"command", "argument", "expand arg", "in", \;
int    validate_token(t_token *node);
t_token        *tokenize_string(t_data *d, char *prompt);

//	c_files/tokens/tokens.c
t_token        *new_token(char *name, t_token *prv, t_toktype type);
t_token        *token_first(t_token *lst);
t_token        *get_token(t_token *lst, char *name);
void     clear_tokens(t_token *token);

//	c_files/minishell.c
int    main(int argc, char *argv[], char **env);

